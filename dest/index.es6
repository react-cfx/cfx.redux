// Generated by CoffeeScript 2.0.0-beta2
var CreateStore, SI, applyMiddleware, combineReducers, createStore, mergeReduce, redux;

redux = require('redux');

({createStore, applyMiddleware, combineReducers} = redux);

SI = require('cfx.seamless-immutable');

CreateStore = function(reducers, pluginList = []) {
  return createStore(combineReducers(reducers), applyMiddleware.apply(this, pluginList));
};

mergeReduce = function(reduceMap, defaultState, options) {
  if (!defaultState) {
    throw new Error('must be provided a default state.');
  }
  return function(state = defaultState, action) {
    var isImmutable, r, reduce, reduceName;
    isImmutable = (options != null ? options.immutable : void 0) == null ? true : options.immutable === false ? false : true;
    if (isImmutable) {
      state = SI.new(state);
    }
    r = {};
    for (reduceName in reduceMap) {
      reduce = reduceMap[reduceName];
      r[reduceName] = reduce(state[reduceName], action);
    }
    return r;
  };
};

export default {
  redux,
  createStore: CreateStore,
  mergeReduce
};
